import { PrismaClient } from "@prisma/client";
import { readdirSync, readFileSync } from "fs";
import { has } from "./utils/has";
import minimist from "minimist";
import { exit } from "process";

const prisma = new PrismaClient();

const CVE_LIST_PATH = "./cvelistV5/preview_cves";
const START_AT = 0;
const COUNT_PER_BATCH = 100;

type DbCVE = {
  id: string;
  json: object;
};

async function main() {
  const args = minimist(process.argv.slice(2));
  if (!(args.mode === "update" || args.mode === "populate")) {
    console.log("Specify `--mode populate` or `--mode update`");
    return;
  }

  const files: string[] = getAllFileNames(CVE_LIST_PATH);
  let cves: DbCVE[] = [];

  if (args.mode === "populate") {
    for (let n = START_AT; n < files.length; n++) {
      const path = files[n];
      if (!path) continue;

      const cve = getCveFromFile(path);
      if (cve) cves.push(cve);

      if (n % COUNT_PER_BATCH === 0) {
        const percentage = ((n / files.length) * 100).toFixed(1);
        const fromId = cves[0].id;
        const toId = cves[cves.length - 1].id;
        console.log(`${n} of ${files.length} (${percentage}%)`);
        console.log(`Uploading from ${fromId} to ${toId}`);

        await populateDb(cves);

        console.log("Done");
        cves = [];
      }
    }
  } else if (args.mode === "update") {
    for (let n = files.length; n > 0; n--) {
      const path = files[n];
      if (!path) continue;

      const cve = getCveFromFile(path);

      if (cve) {
        await updateDb(cve);
      }

      const index = files.length - n;
      if (index % COUNT_PER_BATCH === 0 || n === files.length - 1) {
        const percentage = ((index / files.length) * 100).toFixed(1);
        console.log(`${index} of ${files.length} (${percentage}%)`);
        console.log(`Updated ${cve?.id}`);
      }
    }
  }
}

const populateDb = async (data: DbCVE[]) => {
  try {
    await prisma.cVE.createMany({
      data,
      skipDuplicates: true,
    });
  } catch (e) {
    console.log(data.map((d) => d.id));
    console.error(e);
    console.error(JSON.stringify(e));
    throw e;
  }
};

const updateDb = async (data: DbCVE) => {
  try {
    await prisma.cVE.upsert({
      where: {
        id: data.id,
      },
      update: {
        json: data.json,
      },
      create: data,
    });
  } catch (e) {
    console.log(data);
    console.error(e);
    console.error(JSON.stringify(e));
    throw e;
  }
};

function getAllFileNames(startDir: string): string[] {
  const z = readdirSync(startDir, { withFileTypes: true });
  const files: string[] = [];

  const yearDirs = z.filter((f) => f.isDirectory() && !f.name.startsWith("."));
  yearDirs.forEach((yearDir) => {
    const pathA = `${CVE_LIST_PATH}/${yearDir.name}/`;
    const nDirs = readdirSync(pathA, { withFileTypes: true }).filter((n) =>
      n.isDirectory()
    );
    nDirs.forEach((n) => {
      const pathB = `${pathA}${n.name}/`;
      const cveFiles = readdirSync(pathB, { withFileTypes: true }).filter((n) =>
        n.isFile()
      );
      cveFiles.forEach((f) => {
        if (f.name.endsWith(".json")) {
          files.push(pathB + f.name);
        } else {
          console.warn(pathB + f.name);
        }
      });
    });
  });

  return files;
}

function getCveFromFile(path: string): DbCVE | undefined {
  const fileContents = readFileSync(path);
  const j = JSON.parse(fileContents.toString());
  if (!(typeof j === "object")) return;

  const read_cve = j;
  if (!has("cveMetadata", read_cve)) return;
  const meta = read_cve.cveMetadata;
  if (!(typeof meta === "object" && meta)) return;

  if (!has("cveId", meta)) return;
  const id = meta.cveId;
  if (!(typeof id === "string")) return;

  return {
    id,
    json: j,
  };
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
