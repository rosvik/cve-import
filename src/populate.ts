import { DbRow } from "./types/types";
import { DB } from "./utils/db";
import { getAllFileNames } from "./utils/getAllFileNames";
import { getCveFromFile } from "./utils/getCveFromFile";

/**
 * Populate empty database in batches. Ignore pre-existing rows.
 */
export async function populate(
  database: DB,
  cvePath: string,
  batchSize: number
) {
  const files: string[] = getAllFileNames(cvePath);
  let rows: DbRow[] = [];

  for (let n = 0; n < files.length; n++) {
    const path = files[n];
    if (!path) continue;

    const cve = getCveFromFile(path);
    if (cve) rows.push(cve);

    if (n % batchSize === 0) {
      const percentage = ((n / files.length) * 100).toFixed(1);
      const fromId = rows[0].id;
      const toId = rows[rows.length - 1].id;
      console.log(`${n} of ${files.length} (${percentage}%)`);
      console.log(`Uploading from ${fromId} to ${toId}`);

      await database.populate(rows);

      console.log("Done");
      rows = [];
    }
  }
}
