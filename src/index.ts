import { PrismaClient } from "@prisma/client";
import { readdirSync, readFileSync } from "fs";

/**
 * A type guard. Checks if given object x has the key.
 */
const has = <K extends string>(
  key: K,
  x: object
): x is { [key in K]: unknown } => key in x;

const prisma = new PrismaClient();

const CVE_LIST_PATH = "./cvelist";

async function main() {
  const z = readdirSync(CVE_LIST_PATH, { withFileTypes: true });

  const files: string[] = [];

  const yearDirs = z.filter((f) => f.isDirectory() && !f.name.startsWith("."));
  yearDirs.forEach((yearDir) => {
    const pathA = `${CVE_LIST_PATH}/${yearDir.name}/`;
    const nDirs = readdirSync(pathA, { withFileTypes: true }).filter((n) =>
      n.isDirectory()
    );
    nDirs.forEach((n) => {
      const pathB = `${pathA}${n.name}/`;
      const cveFiles = readdirSync(pathB, { withFileTypes: true }).filter((n) =>
        n.isFile()
      );
      cveFiles.forEach((f) => {
        if (f.name.endsWith(".json")) {
          files.push(pathB + f.name);
        } else {
          console.warn(pathB + f.name);
        }
      });
    });
  });

  const cves: {
    id: string;
    json: object;
  }[] = [];

  for (let n = 0; n < 10; n++) {
    const path = files[n];
    if (!path) continue;

    console.log(path);

    const fileContents = readFileSync(path);
    const j = JSON.parse(fileContents.toString());
    if (!(typeof j === "object")) continue;

    const read_cve = j;
    if (!has("CVE_data_meta", read_cve)) continue;
    const meta = read_cve.CVE_data_meta;
    if (!(typeof meta === "object" && meta)) continue;

    if (!has("ID", meta)) continue;
    const id = meta.ID;
    if (!(typeof id === "string")) continue;

    cves.push({
      id,
      json: j,
    });
  }

  try {
    await prisma.cVE.createMany({
      data: cves,
      skipDuplicates: true,
    });
  } catch (e) {
    console.error(e);
    console.error(JSON.stringify(e));
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
