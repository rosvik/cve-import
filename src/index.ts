import { PrismaClient } from "@prisma/client";
import { readdirSync, readFileSync } from "fs";
import { has } from "./utils/has";

const prisma = new PrismaClient();

const CVE_LIST_PATH = "./cvelist";

type DbCVE = {
  id: string;
  json: object;
};

async function main() {
  const files: string[] = getAllFileNames(CVE_LIST_PATH);

  const cves: DbCVE[] = [];

  for (let n = 0; n < 100; n++) {
    const path = files[n];
    if (!path) continue;

    console.log(path);
    const cve = getCveFromFile(path);
    if (cve) cves.push(cve);
  }

  try {
    await prisma.cVE.createMany({
      data: cves,
      skipDuplicates: true,
    });
  } catch (e) {
    console.error(e);
    console.error(JSON.stringify(e));
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });

function getAllFileNames(startDir: string): string[] {
  const z = readdirSync(startDir, { withFileTypes: true });
  const files: string[] = [];

  const yearDirs = z.filter((f) => f.isDirectory() && !f.name.startsWith("."));
  yearDirs.forEach((yearDir) => {
    const pathA = `${CVE_LIST_PATH}/${yearDir.name}/`;
    const nDirs = readdirSync(pathA, { withFileTypes: true }).filter((n) =>
      n.isDirectory()
    );
    nDirs.forEach((n) => {
      const pathB = `${pathA}${n.name}/`;
      const cveFiles = readdirSync(pathB, { withFileTypes: true }).filter((n) =>
        n.isFile()
      );
      cveFiles.forEach((f) => {
        if (f.name.endsWith(".json")) {
          files.push(pathB + f.name);
        } else {
          console.warn(pathB + f.name);
        }
      });
    });
  });

  return files;
}

function getCveFromFile(path: string): DbCVE | undefined {
  const fileContents = readFileSync(path);
  const j = JSON.parse(fileContents.toString());
  if (!(typeof j === "object")) return;

  const read_cve = j;
  if (!has("CVE_data_meta", read_cve)) return;
  const meta = read_cve.CVE_data_meta;
  if (!(typeof meta === "object" && meta)) return;

  if (!has("ID", meta)) return;
  const id = meta.ID;
  if (!(typeof id === "string")) return;

  return {
    id,
    json: j,
  };
}
