import { exec } from "child_process";
import { ProblemTypes, Published } from "../types/cve";

/**
 * A type guard. Checks if given object x has the key.
 */
export const has = <K extends string>(
  key: K,
  x: unknown
): x is { [key in K]: unknown } => key in (x as any);

/**
 * Run a shell command and return the stdout
 *
 * @param command The command to run
 * @returns The stdout of the command
 * @throws If the command returns a non-zero exit code
 */
export function execute(command: string): Promise<string> {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, _stderr) => {
      if (error) reject(error);
      resolve(stdout.trim());
    });
  });
}

/**
 * Find all CVE IDs in a given string
 *
 * @param text The string to search
 * @returns A list of CVE IDs, without duplicates
 */
export function findIds(text: string): string[] {
  const matches = text.match(/CVE-\d{4}-\d{4,}/g) ?? [];
  const uniqueMatches = new Set(matches);
  return Array.from(uniqueMatches);
}

/**
 * Parse a UTC date string into a Date object
 *
 * @param date The date string
 * @returns The Date object in UTC
 */
export function parseDateAsUTC(date: string | undefined): Date | null {
  if (!date) return null;
  if (date.endsWith("Z")) return new Date(date);

  // Date has a positive time zone
  if (date.indexOf("+") !== -1) return new Date(date);

  // Date has a negative time zone
  if (date.split("T")[1]?.indexOf("-") !== -1) return new Date(date);

  return new Date(date + "Z");
}

type ProblemType = ProblemTypes extends (infer U)[] ? U : never;
/**
 * Get all CWE IDs for a CVE based on its problem types
 *
 * @param cve The CVE
 * @returns A list of CWE IDs, without duplicates
 */
export function getCweIds(cve: Published): string[] {
  const getCweIdsFromProblemType = (pt: ProblemType): string[] =>
    pt.descriptions.map((d) => d.cweId).filter(Boolean) as string[];
  const allIds =
    cve.containers.cna.problemTypes
      ?.map((pt) => getCweIdsFromProblemType(pt))
      .flatMap((x) => x) ?? [];
  const uniqueIds = Array.from(new Set(allIds));
  return uniqueIds;
}
