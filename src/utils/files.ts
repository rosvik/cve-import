import { readdirSync, readFileSync } from "fs";
import { DbRow } from "../types/types";
import { isPublished, validateJSON } from "./validator";
import { CVE } from "../types/cve";
import { getCweIds, parseDateAsUTC } from "./utils";

const CVE_LIST_BASE = "/cves";

/**
 * Get the path of every json file in the cvelistV5 git repository.
 *
 * @param gitPath Path to the cvelistV5 git repository
 * @returns An array of file paths
 */
export function getAllFileNames(gitPath: string): string[] {
  const cveDir = gitPath + CVE_LIST_BASE;
  const z = readdirSync(cveDir, { withFileTypes: true });
  const files: string[] = [];

  const yearDirs = z.filter((f) => f.isDirectory() && !f.name.startsWith("."));
  yearDirs.forEach((yearDir) => {
    const pathA = `${cveDir}/${yearDir.name}/`;
    const nDirs = readdirSync(pathA, { withFileTypes: true }).filter((n) =>
      n.isDirectory()
    );
    nDirs.forEach((n) => {
      const pathB = `${pathA}${n.name}/`;
      const cveFiles = readdirSync(pathB, { withFileTypes: true }).filter((n) =>
        n.isFile()
      );
      cveFiles.forEach((f) => {
        if (f.name.endsWith(".json")) {
          files.push(pathB + f.name);
        } else {
          console.warn(pathB + f.name);
        }
      });
    });
  });

  return files;
}

/**
 * Get JSON data from a given file path, formatted as a DbRow.
 *
 * @param path Absolute path to the json file
 * @returns The CVE data, id and json
 */
export function getCveFromFile(path: string): DbRow | undefined {
  const fileContents = readFileSync(path);
  const j = JSON.parse(fileContents.toString());
  const CVE = validateJSON(j);
  if (!CVE) return;
  return formatToDbRow(CVE, j);
}

/**
 * Get path to the json file relative to cvelistV5 git root.
 *
 * @param id The CVE id
 * @returns The path to the json file
 * @example
 * `filePathById("CVE-2021-1234")` returns `/cves/2021/1xxx/CVE-2021-1234.json`
 */
export function filePathById(id: string): string {
  // `CVE-YYYY-NNNNN`
  const year = id.slice(4, 8); // YYYY
  const num = id.slice(9); // NNNNN
  const group = `${num.slice(0, -3)}xxx`;

  return `${CVE_LIST_BASE}/${year}/${group}/${id}.json`;
}

function formatToDbRow(cve: CVE, json: any): DbRow {
  return {
    id: cve.cveMetadata.cveId,
    data: json,
    title: cve.containers.cna.title ?? null,
  };
}
