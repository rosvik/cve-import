import { PrismaClient } from "@prisma/client";
import { DbRow } from "../types/types";

export class DB {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  populate = async (rows: DbRow[]) => {
    try {
      await this.prisma.cVE.createMany({
        data: rows,
        skipDuplicates: true,
      });
    } catch (e) {
      console.log(rows.map((d) => d.id));
      console.error(e);
      console.error(JSON.stringify(e));
      throw e;
    }
  };

  /**
   * Update a row in the database. If the row does not exist, create it.
   *
   * @param row The row to update or insert
   */
  upsertRow = async (row: DbRow) => {
    try {
      await this.prisma.cVE.upsert({
        where: {
          id: row.id,
        },
        update: {
          json: row.json,
        },
        create: row,
      });
    } catch (e) {
      console.log(row);
      console.error(e);
      console.error(JSON.stringify(e));
      throw e;
    }
  };

  disconnect = async () => {
    await this.prisma.$disconnect();
  };
}
