import { readdirSync, readFileSync } from "fs";
import { DbRow } from "../types/types";
import { has } from "./utils";

export function getAllFileNames(startDir: string): string[] {
  const z = readdirSync(startDir, { withFileTypes: true });
  const files: string[] = [];

  const yearDirs = z.filter((f) => f.isDirectory() && !f.name.startsWith("."));
  yearDirs.forEach((yearDir) => {
    const pathA = `${startDir}/${yearDir.name}/`;
    const nDirs = readdirSync(pathA, { withFileTypes: true }).filter((n) =>
      n.isDirectory()
    );
    nDirs.forEach((n) => {
      const pathB = `${pathA}${n.name}/`;
      const cveFiles = readdirSync(pathB, { withFileTypes: true }).filter((n) =>
        n.isFile()
      );
      cveFiles.forEach((f) => {
        if (f.name.endsWith(".json")) {
          files.push(pathB + f.name);
        } else {
          console.warn(pathB + f.name);
        }
      });
    });
  });

  return files;
}

export function getCveFromFile(path: string): DbRow | undefined {
  const fileContents = readFileSync(path);
  const j = JSON.parse(fileContents.toString());
  if (!(typeof j === "object")) return;

  const read_cve = j;
  if (!has("cveMetadata", read_cve)) return;
  const meta = read_cve.cveMetadata;
  if (!(typeof meta === "object" && meta)) return;

  if (!has("cveId", meta)) return;
  const id = meta.cveId;
  if (!(typeof id === "string")) return;

  return {
    id,
    json: j,
  };
}
